plugins {
    id "java"
    id "idea"
    id "org.springframework.boot" version "${springBootVersion}"
    id "com.google.cloud.tools.jib" version "3.3.2"
    id "com.diffplug.spotless" version "${spotlessVersion}"
    id "jacoco"
}

apply plugin: "io.spring.dependency-management"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.spring.io/release" }
}

spotless {
    java {
        googleJavaFormat()
        trimTrailingWhitespace()
        endWithNewline()
    }

    groovyGradle {
        target "*.gradle", "**/*.gradle"
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }

    format "misc", {
        target "**/*.md", "**/*.yml"
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }

    lineEndings "UNIX"
}

configurations {
    mybatisGenerator
}

sourceCompatibility = "17"
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:all"]

dependencies {
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-json"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    developmentOnly "org.springframework.boot:spring-boot-docker-compose"

    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"

    implementation "org.modelmapper:modelmapper:3.1.0"
    implementation "com.auth0:java-jwt:4.4.0"
    implementation "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
    implementation "org.springdoc:springdoc-openapi-security:${springdocVersion}"

    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}"
    implementation "org.flywaydb:flyway-core"
    implementation "org.flywaydb:flyway-mysql"
    runtimeOnly "com.mysql:mysql-connector-j"
    // runtimeOnly "org.postgresql:postgresql"

    testImplementation "org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${mybatisVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "com.h2database:h2"

    testImplementation "org.flywaydb.flyway-test-extensions:flyway-spring-test:9.5.0"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:mysql"

    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"

    runtimeOnly "org.springframework.boot:spring-boot-properties-migrator"

    mybatisGenerator fileTree(dir: "${rootDir}/buildSrc/build/libs", include: ["*.jar"])
    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:${mybatisGeneratorVersion}"
    mybatisGenerator "org.mybatis.generator:mybatis-generator-maven-plugin:${mybatisGeneratorVersion}"
    mybatisGenerator "com.mysql:mysql-connector-j:+"
    mybatisGenerator "com.itfsw:mybatis-generator-plugin:1.3.10"
}

tasks.named("test") {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/generatorConfig.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

tasks.register("mybatisGenerator") {
    def properties = getDbProperties()
    ant.properties["projectDir"] = projectDir.path
    ant.properties["driverClass"] = properties.getProperty("jdbcConnection.driverClass")
    ant.properties["connectionURL"] = properties.getProperty("jdbcConnection.connectionURL")
    ant.properties["userId"] = properties.getProperty("jdbcConnection.userId")
    ant.properties["password"] = properties.getProperty("jdbcConnection.password")
    ant.properties["javaModelPackage"] = properties.getProperty("javaModelPackage")
    ant.properties["mapperPackage"] = properties.getProperty("mapperPackage")
    ant.properties["repositoryPackage"] = properties.getProperty("repositoryPackage")
    doLast {
        ant.taskdef(name: "mbgenerator",
                classname: "org.mybatis.generator.ant.GeneratorAntTask",
                classpath: configurations.mybatisGenerator.asPath)
        ant.mbgenerator(configfile: "src/main/resources/mybatis/generatorConfig.xml",
                overwrite: true,
                verbose: true) {
            propertyset {
                propertyref(name: "projectDir")
                propertyref(name: "userId")
                propertyref(name: "driverClass")
                propertyref(name: "connectionURL")
                propertyref(name: "password")
                propertyref(name: "javaModelPackage")
                propertyref(name: "mapperPackage")
                propertyref(name: "repositoryPackage")
            }
        }
    }
}

mybatisGenerator.group = "mybatis"
compileJava.dependsOn "spotlessApply"
